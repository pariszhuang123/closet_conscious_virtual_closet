name: ClosetConscious CI Trunk Based

on:
  push:
    branches: [ master ]

jobs:
  deploy_dev_supabase:
    runs-on: ubuntu-latest

    env:
      SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
      SUPABASE_DB_PASSWORD: ${{ secrets.DEV_DB_PASSWORD }}
      SUPABASE_PROJECT_ID: ${{ secrets.DEV_PROJECT_ID }}

    steps:
      - uses: actions/checkout@v4
      - uses: supabase/setup-cli@v1
        with:
          version: latest

      - run: supabase link --project-ref $SUPABASE_PROJECT_ID
      - run: supabase db push

  deploy_dev_ui:
    needs: deploy_dev_supabase
    name: dev_build
    runs-on: ubuntu-latest
    env:
      ENV: dev # Set the environment variable for development
      SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
      WEB_CLIENT_ID: ${{ secrets.WEB_CLIENT_ID }}
      IOS_CLIENT_ID: ${{ secrets.IOS_CLIENT_ID }}

    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '17.0.9'

      - uses: dart-lang/setup-dart@v1
        with:
          sdk: 'stable'

      - name: Update PATH and Check Dart Version
        run: |
          echo "PATH=$(dirname $(which dart)):$PATH" >> $GITHUB_ENV
          dart --version

      - name: Print environment PATH
        run: echo $PATH

      - uses: subosito/flutter-action@v1
        id: flutter
        with:
          flutter-version: '3.19.6'

      - name: Check Bundled Dart SDK Version
        run: flutter doctor -v

      - name: Create directory for keystore
        run: mkdir -p app

      - name: Decode and save keystore files
        run: |
          echo "${{ secrets.DEBUG_KEYSTORE_BASE64 }}" | base64 --decode > closetconscious/android/debug.keystore

      - name: Setup key.properties
        run: |
          echo "debugStoreFile=closetconscious/android/debug.keystore" >> key.properties
          echo "debugStorePassword=${{ secrets.DEBUG_STORE_PASSWORD }}" >> key.properties
          echo "debugKeyAlias=${{ secrets.DEBUG_KEY_ALIAS }}" >> key.properties
          echo "debugKeyPassword=${{ secrets.DEBUG_KEY_PASSWORD }}" >> key.properties

      - name: Create app_config_dev.json
        run: |
          mkdir -p config
          echo '{
            "SUPABASE_URL": "${{ secrets.SUPABASE_URL }}",
            "SUPABASE_ANON_KEY": "${{ secrets.SUPABASE_ANON_KEY }}",
            "webClientId": "${{ secrets.WEB_CLIENT_ID }}",
            "iosClientId": "${{ secrets.IOS_CLIENT_ID }}"
          }' > config/app_config_dev.json

      - name: Install dependencies
        run: flutter pub get

      - name: Run linting and static analysis
        run: flutter analyze

      - name: Run tests
        run: flutter test

      - name: Build APK for development
        run: flutter build apk --debug --target=lib/main_dev.dart --dart-define=ENV=$ENV

      - name: Upload development APK
        uses: actions/upload-artifact@v2
        with:
          name: dev-apk
          path: build/app/outputs/flutter-apk/app-debug.apk

  manual_approval:
    needs: deploy_dev_ui
    runs-on: ubuntu-latest
    steps:
      - name: Await manual approval
        uses: hmarr/auto-approve-action@v2

  deploy_prod_supabase:
    needs: manual_approval
    runs-on: ubuntu-latest

    env:
      SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
      SUPABASE_DB_PASSWORD: ${{ secrets.PROD_DB_PASSWORD }}
      SUPABASE_PROJECT_ID: ${{ secrets.PROD_PROJECT_ID }}

    steps:
      - uses: actions/checkout@v4
      - uses: supabase/setup-cli@v1
        with:
          version: latest

      - run: supabase link --project-ref $SUPABASE_PROJECT_ID
      - run: supabase db push

  deploy_prod_ui:
    needs: deploy_prod_supabase
    name: prod_build
    runs-on: ubuntu-latest
    env:
      ENV: prod # Set the environment variable for production
      SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
      WEB_CLIENT_ID: ${{ secrets.WEB_CLIENT_ID }}
      IOS_CLIENT_ID: ${{ secrets.IOS_CLIENT_ID }}

    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '17.0.9'

      - uses: dart-lang/setup-dart@v1
        with:
          sdk: 'stable'

      - name: Update PATH and Check Dart Version
        run: |
          echo "PATH=$(dirname $(which dart)):$PATH" >> $GITHUB_ENV
          dart --version

      - name: Print environment PATH
        run: echo $PATH

      - uses: subosito/flutter-action@v1
        id: flutter
        with:
          flutter-version: '3.19.6'

      - name: Check Bundled Dart SDK Version
        run: flutter doctor -v

      - name: Create directory for keystore
        run: mkdir -p app

      - name: Decode and save production keystore file
        run: |
          echo "${{ secrets.PROD_KEYSTORE_BASE64 }}" | base64 --decode > closetconscious/android/closet_conscious_release.keystore

      - name: Setup key.properties for production
        run: |
          echo "prodStoreFile=closetconscious/android/closet_conscious_release.keystore" >> key.properties
          echo "prodStorePassword=${{ secrets.PROD_STORE_PASSWORD }}" >> key.properties
          echo "prodKeyAlias=${{ secrets.PROD_KEY_ALIAS }}" >> key.properties
          echo "prodKeyPassword=${{ secrets.PROD_KEY_PASSWORD }}" >> key.properties

      - name: Create app_config_prod.json
        run: |
          mkdir -p config
          echo '{
            "SUPABASE_URL": "'${{ secrets.SUPABASE_URL }}'",
            "SUPABASE_ANON_KEY": "'${{ secrets.SUPABASE_ANON_KEY }}'",
            "webClientId": "'${{ secrets.WEB_CLIENT_ID }}'",
            "iosClientId": "'${{ secrets.IOS_CLIENT_ID }}'"
          }' > config/app_config_prod.json

      - name: Install dependencies
        run: flutter pub get

      - name: Run linting and static analysis
        run: flutter analyze

      - name: Run tests
        run: flutter test

      - name: Build APK for production
        run: flutter build apk --release --target=lib/main_prod.dart --dart-define=ENV=$ENV

      - name: Upload production APK
        uses: actions/upload-artifact@v2
        with:
          name: prod-apk
          path: build/app/outputs/flutter-apk/app-release.apk