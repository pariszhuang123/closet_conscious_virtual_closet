name: ClosetConscious CI Trunk Based

on:
  push:
    branches: [ master ]

jobs:
  deploy_dev_supabase:
    runs-on: ubuntu-latest

    env:
      SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
      SUPABASE_DB_PASSWORD: ${{ secrets.DEV_DB_PASSWORD }}
      SUPABASE_PROJECT_ID: ${{ secrets.DEV_PROJECT_ID }}
      SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}

    steps:
      - uses: actions/checkout@v4
      - uses: supabase/setup-cli@v1
        with:
          version: latest

      - run: supabase link --project-ref $SUPABASE_PROJECT_ID
      - run: supabase db push

      # Deploy Supabase Function
      - name: Deploy Supabase Function
        run:
          supabase functions deploy deleteUserFolderAndAccount --project-ref $SUPABASE_PROJECT_ID

  deploy_dev_ui:
    needs: deploy_dev_supabase
    runs-on: ubuntu-latest
    env:
      ENV: dev
      SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
      SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
      WEB_CLIENT_ID: ${{ secrets.WEB_CLIENT_ID }}
      IOS_CLIENT_ID: ${{ secrets.IOS_CLIENT_ID }}

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17.0.9'
      - uses: dart-lang/setup-dart@v1
        with:
          sdk: 'stable'
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.0'

      - name: Cache Flutter dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.pub-cache
            .flutter-plugins
            .flutter-plugins-dependencies
            build/
          key: ${{ runner.os }}-flutter-${{ hashFiles('**/pubspec.lock') }}-${{ github.run_number }}
          restore-keys: |
            ${{ runner.os }}-flutter-

      - name: Setup key.properties for development
        run: |
          mkdir -p app
          echo "debugStoreFile=android/app/dev_keystore.jks" > android/app/key.properties
          echo "debugStorePassword=${{ secrets.DEBUG_STORE_PASSWORD }}" >> android/key.properties
          echo "debugKeyAlias=${{ secrets.DEBUG_KEY_ALIAS }}" >> android/key.properties
          echo "debugKeyPassword=${{ secrets.DEBUG_KEY_PASSWORD }}" >> android/key.properties
          echo "${{ secrets.DEBUG_KEYSTORE_BASE64 }}" | base64 --decode > android/app/dev_keystore.jks

      - name: Create app_config_dev.json
        run: |
          mkdir -p config
          echo '{
            "SUPABASE_URL": "${{ secrets.SUPABASE_URL }}",
            "SUPABASE_ANON_KEY": "${{ secrets.SUPABASE_ANON_KEY }}",
            "SUPABASE_SERVICE_ROLE_KEY": "${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}",
            "webClientId": "${{ secrets.WEB_CLIENT_ID }}",
            "iosClientId": "${{ secrets.IOS_CLIENT_ID }}"
          }' > config/app_config_dev.json

      - name: Install dependencies
        run: flutter pub get

      - name: Generate code and resources
        run: |
          flutter pub run build_runner build --delete-conflicting-outputs

      - name: Create localization files
        run: flutter pub run intl_utils:generate

      - name: Run linting and static analysis
        run: flutter analyze

      - name: Run unit and widget tests
        run: flutter test

      - name: Build APK for development
        run: flutter build apk --debug --flavor dev --target=lib/main_dev.dart --dart-define=ENV=$ENV --target-platform android-arm64

      - name: Upload development APK
        uses: actions/upload-artifact@v4
        with:
          name: dev-apk
          path: build/app/outputs/flutter-apk/app-dev-debug.apk

  deploy_prod_supabase:
    needs: deploy_dev_ui
    runs-on: ubuntu-latest

    env:
      SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
      SUPABASE_DB_PASSWORD: ${{ secrets.PROD_DB_PASSWORD }}
      SUPABASE_PROJECT_ID: ${{ secrets.PROD_PROJECT_ID }}
      SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}

    steps:
      - uses: actions/checkout@v4
      - uses: supabase/setup-cli@v1
        with:
          version: latest

      - run: supabase link --project-ref $SUPABASE_PROJECT_ID
      - run: supabase db push

      # Deploy Supabase Function
      - name: Deploy Supabase Function
        run:
          supabase functions deploy deleteUserFolderAndAccount --project-ref $SUPABASE_PROJECT_ID


  deploy_prod_ui:
    needs: deploy_prod_supabase
    runs-on: ubuntu-latest
    env:
      ENV: prod
      SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
      SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
      WEB_CLIENT_ID: ${{ secrets.WEB_CLIENT_ID }}
      IOS_CLIENT_ID: ${{ secrets.IOS_CLIENT_ID }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Ensures we get the full Git history, including tags

      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17.0.9'  # Correct setup for Java, no sdk needed

      - uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.0'  # Correct setup for Flutter

      - uses: dart-lang/setup-dart@v1
        with:
          sdk: 'stable'  # Correct setup for Dart

      - name: Cache Flutter dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.pub-cache
            .flutter-plugins
            .flutter-plugins-dependencies
            build/
          key: ${{ runner.os }}-flutter-${{ hashFiles('**/pubspec.lock') }}-${{ github.run_number }}
          restore-keys: |
            ${{ runner.os }}-flutter-

      - name: Setup key.properties for production
        run: |
          mkdir -p app
          echo "prodStoreFile=android/app/prod_keystore.jks" > android/app/key.properties
          echo "prodKeyAlias=${{ secrets.PROD_KEY_ALIAS }}" >> android/key.properties
          echo "prodStorePassword=${{ secrets.PROD_STORE_PASSWORD }}" >> android/key.properties
          echo "prodKeyPassword=${{ secrets.PROD_KEY_PASSWORD }}" >> android/key.properties
          echo "${{ secrets.PROD_KEYSTORE_BASE64 }}" | base64 --decode > android/app/prod_keystore.jks

      - name: Create app_config_prod.json
        run: |
          mkdir -p config
          echo '{
            "SUPABASE_URL": "${{ secrets.SUPABASE_URL }}",
            "SUPABASE_ANON_KEY": "${{ secrets.SUPABASE_ANON_KEY }}",
            "SUPABASE_SERVICE_ROLE_KEY": "${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}",
            "webClientId": "${{ secrets.WEB_CLIENT_ID }}",
            "iosClientId": "${{ secrets.IOS_CLIENT_ID }}"
          }' > config/app_config_prod.json

      - name: Install dependencies
        run: flutter pub get

      - name: Run linting and static analysis
        run: flutter analyze

      - name: Run tests
        run: flutter test

      - name: Set Version Code and Version Name
        id: versioning
        run: |
          git fetch --tags
          versionName=$(git describe --tags --abbrev=0 || echo "1.0.0")
          versionCode=$(git rev-list --count HEAD)
          echo "VERSION_CODE=$versionCode" >> $GITHUB_ENV
          echo "VERSION_NAME=$versionName" >> $GITHUB_ENV

      - name: Build AAB for production
        run: |
          flutter build appbundle --release --flavor prod --target=lib/main_prod.dart --dart-define=ENV=$ENV \
          --build-name=$VERSION_NAME --build-number=$VERSION_CODE

      - name: Upload production AAB
        uses: actions/upload-artifact@v4
        with:
          name: prod-aab
          path: build/app/outputs/bundle/prodRelease/app-prod-release.aab
