name: ClosetConscious CI Trunk Based

on:
  push:
    branches: [ master ]
  workflow_dispatch:

jobs:
  deploy_dev_supabase:
    runs-on: ubuntu-latest

    env:
      SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
      SUPABASE_DB_PASSWORD: ${{ secrets.DEV_DB_PASSWORD }}
      SUPABASE_PROJECT_ID: ${{ secrets.DEV_PROJECT_ID }}

    steps:
      - uses: actions/checkout@v4
      - uses: supabase/setup-cli@v1
        with:
          version: latest

      - run: supabase link --project-ref $SUPABASE_PROJECT_ID
      - run: supabase db push

  deploy_dev_ui:
    needs: deploy_dev_supabase
    runs-on: ubuntu-latest
    environment: dev

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17.0.9'
      - uses: dart-lang/setup-dart@v1
        with:
          sdk: 'stable'
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.0'

      - name: Cache Flutter dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.pub-cache
            .flutter-plugins
            .flutter-plugins-dependencies
            build/
          key: ${{ runner.os }}-flutter-${{ hashFiles('**/pubspec.lock') }}-${{ github.run_number }}
          restore-keys: |
            ${{ runner.os }}-flutter-

      - name: Setup key.properties for development
        run: |
          mkdir -p app
          echo "debugStoreFile=android/app/dev_keystore.jks" > android/app/key.properties
          echo "debugStorePassword=${{ secrets.DEBUG_STORE_PASSWORD }}" >> android/key.properties
          echo "debugKeyAlias=${{ secrets.DEBUG_KEY_ALIAS }}" >> android/key.properties
          echo "debugKeyPassword=${{ secrets.DEBUG_KEY_PASSWORD }}" >> android/key.properties
          echo "storeType=JKS" >> android/key.properties
          echo "${{ secrets.DEBUG_KEYSTORE_BASE64 }}" | base64 --decode > android/app/dev_keystore.jks

      - name: Create app_config_dev.json
        run: |
          mkdir -p config
          echo '{
            "SUPABASE_URL": "${{ secrets.SUPABASE_URL }}",
            "SUPABASE_ANON_KEY": "${{ secrets.SUPABASE_ANON_KEY }}",
            "SUPABASE_SERVICE_ROLE_KEY": "${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}",
            "WEB_CLIENT_ID": "${{ secrets.WEB_CLIENT_ID }}",
            "IOS_CLIENT_ID": "${{ secrets.IOS_CLIENT_ID }}"
          }' > config/app_config_dev.json

      - name: Install dependencies
        run: flutter pub get

      - name: Generate code and resources
        run: |
          flutter pub run build_runner build --delete-conflicting-outputs

      - name: Create localization files
        run: flutter pub run intl_utils:generate

      - name: Run linting and static analysis
        run: flutter analyze

      - name: Run unit and widget tests
        run: flutter test

      - name: Set Build Number
        id: versioning
        run: |
          # Get the number of commits to use as the build number
          versionCode=$(git rev-list --count HEAD)
          echo "BUILD_NUMBER=$versionCode" >> $GITHUB_ENV

      - name: Build APK for development
        run: flutter build apk --debug --flavor dev --target=lib/main_dev.dart --dart-define=ENV=$ENV \
          --build-number=$BUILD_NUMBER --target-platform android-arm64

      - name: Upload development APK
        uses: actions/upload-artifact@v4
        with:
          name: dev-apk
          path: build/app/outputs/flutter-apk/app-dev-debug.apk

  deploy_prod_supabase:
    needs: deploy_dev_ui
    runs-on: ubuntu-latest

    env:
      SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
      SUPABASE_DB_PASSWORD: ${{ secrets.PROD_DB_PASSWORD }}
      SUPABASE_PROJECT_ID: ${{ secrets.PROD_PROJECT_ID }}

    steps:
      - uses: actions/checkout@v4
      - uses: supabase/setup-cli@v1
        with:
          version: latest

      - run: supabase link --project-ref $SUPABASE_PROJECT_ID
      - run: supabase db push

  deploy_prod_ui:
    needs: deploy_prod_supabase
    runs-on: ubuntu-latest
    environment: prod

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Ensures full Git history including tags

      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17.0.9'

      - uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.0'

      - uses: dart-lang/setup-dart@v1
        with:
          sdk: 'stable'

      - name: Cache Flutter dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.pub-cache
            .flutter-plugins
            .flutter-plugins-dependencies
            build/
          key: ${{ runner.os }}-flutter-${{ hashFiles('**/pubspec.lock') }}-${{ github.run_number }}
          restore-keys: |
            ${{ runner.os }}-flutter-

      - name: Setup key.properties for production
        run: |
          mkdir -p app
          echo "prodStoreFile=android/app/prod_keystore.jks" > android/app/key.properties
          echo "prodKeyAlias=${{ secrets.PROD_KEY_ALIAS }}" >> android/key.properties
          echo "prodStorePassword=${{ secrets.PROD_STORE_PASSWORD }}" >> android/key.properties
          echo "prodKeyPassword=${{ secrets.PROD_KEY_PASSWORD }}" >> android/key.properties
          echo "storeType=JKS" >> android/key.properties
          echo "${{ secrets.PROD_KEYSTORE_BASE64 }}" | base64 --decode > android/app/prod_keystore.jks

      - name: Create app_config_prod.json
        run: |
          mkdir -p config
          echo '{
            "SUPABASE_URL": "${{ secrets.SUPABASE_URL }}",
            "SUPABASE_ANON_KEY": "${{ secrets.SUPABASE_ANON_KEY }}",
            "SUPABASE_SERVICE_ROLE_KEY": "${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}",
            "WEB_CLIENT_ID": "${{ secrets.WEB_CLIENT_ID }}",
            "IOS_CLIENT_ID": "${{ secrets.IOS_CLIENT_ID }}"
          }' > config/app_config_prod.json

      - name: Install dependencies
        run: flutter pub get

      - name: Run linting and static analysis
        run: flutter analyze

      - name: Run tests
        run: flutter test

      - name: Set Build Number
        id: versioning
        run: |
          versionCode=$(git rev-list --count HEAD)
          echo "BUILD_NUMBER=$versionCode" >> $GITHUB_ENV

      - name: Install Ruby 3.3.5 (NEW STEP)
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.3.5'

      - name: Install Fastlane
        run: gem install fastlane

      - name: Build AAB for production
        run: |
          flutter build appbundle --release --flavor prod --target=lib/main_prod.dart --dart-define=ENV=$ENV \
          --build-number=$BUILD_NUMBER

      - name: Fetch Git commit messages for release notes
        run: |
          release_notes=$(git log -1 --oneline | sed "s/'//g")
          if [ -z "$release_notes" ]; then
          release_notes="No new commit messages."
          fi
          echo "$release_notes" > metadata/android/en-US/changelogs/default.txt

      - name: Create service account key
        run: |
          mkdir -p config
          echo "${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT_JSON }}" | base64 --decode > config/google_play_key.json

      - name: Upload AAB to Google Play Store
        run: |
          fastlane android deploy_internal
        env:
          BUILD_NUMBER: ${{ env.BUILD_NUMBER }}
          RELEASE_NOTES: ${{ env.RELEASE_NOTES }}
          GOOGLE_PLAY_SERVICE_ACCOUNT_JSON: config/google_play_key.json
          FASTLANE_SKIP_CONFIRMATIONS: true

  promote_to_closed:
    needs: deploy_prod_ui
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'  # Ensures this job only runs when manually triggered

    steps:
      - uses: actions/checkout@v4

      - name: Create service account key
        run: |
          mkdir -p config
          echo "${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT_JSON }}" | base64 --decode > config/google_play_key.json

      - name: Promote to closed testing track
        run: |
          fastlane promote_to_closed
        env:
          GOOGLE_PLAY_SERVICE_ACCOUNT_JSON: config/google_play_key.json

  promote_to_open:
    needs: promote_to_closed
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'  # Ensures this job only runs when manually triggered

    steps:
      - uses: actions/checkout@v4

      - name: Create service account key
        run: |
          mkdir -p config
          echo "${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT_JSON }}" | base64 --decode > config/google_play_key.json

      - name: Promote to open testing track
        run: |
          fastlane promote_to_open
        env:
          GOOGLE_PLAY_SERVICE_ACCOUNT_JSON: config/google_play_key.json