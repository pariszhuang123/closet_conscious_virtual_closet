platform :android do
  desc "Deploy to internal testing track"
  lane :deploy_internal do
    begin
      # Build AAB with the prod flavor
      gradle(
        task: "bundle",
        flavor: "Prod",  # Add the flavor explicitly
        build_type: "Release",
        project_dir: "./android",
        properties: {
          "target" => "lib/main_prod.dart",  # Passing the target as a Gradle property
          "BUILD_NUMBER" => ENV["BUILD_NUMBER"]  # Ensure BUILD_NUMBER is passed from the GitHub Actions environment
        }
      )  # <-- Closing the gradle block

      # Upload AAB to Google Play Store (Internal Testing Track) with release notes
      upload_to_play_store(
        track: "internal",
        aab: "./build/app/outputs/bundle/prodRelease/app-prod-release.aab",
        json_key: "./config/google_play_key.json",  # Use the path of the file created by GitHub Actions
        package_name: "com.makinglifeeasie.closetconscious",
        metadata_path: "./metadata/android",
        skip_upload_apk: true,  # This skips APK upload, so only AAB will be uploaded
        release_status: 'draft'
      )
    rescue => exception
      UI.error("Failed to deploy to internal track: #{exception.message}")
      raise exception
    ensure
      UI.message("Finished internal testing deployment.")
    end
  end

  desc "Promote to closed testing track"
  lane :promote_to_closed do
    begin

      # Promote from internal to closed track
      upload_to_play_store(
        track: "closed",
        track_promote_to: "closed",  # Explicitly promote from internal to closed
        json_key: "./config/google_play_key.json",  # Use the path of the file created by GitHub Actions
        package_name: "com.makinglifeeasie.closetconscious",
        metadata_path: "./metadata/android",
        skip_upload_apk: true  # This skips APK upload, so only AAB will be uploaded
      )
    rescue => exception
      UI.error("Failed to promote to closed track: #{exception.message}")
      raise exception
    ensure
      UI.message("Finished promoting to closed testing track.")
    end
  end

  desc "Promote to open testing track"
  lane :promote_to_open do
    begin

      # Promote from closed to open track
      upload_to_play_store(
        track: "open",
        track_promote_to: "open",  # Explicitly promote from closed to open
        json_key: "./config/google_play_key.json",  # Use the path of the file created by GitHub Actions
        package_name: "com.makinglifeeasie.closetconscious",
        metadata_path: "./metadata/android",
        skip_upload_apk: true  # This skips APK upload, so only AAB will be uploaded
      )
    rescue => exception
      UI.error("Failed to promote to open track: #{exception.message}")
      raise exception
    ensure
      UI.message("Finished promoting to open testing track.")
    end
  end
end
