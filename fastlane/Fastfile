platform :android do
  desc "Deploy to internal testing track"
  lane :deploy_internal do
    begin
      # Build AAB with the prod flavor
      gradle(
        task: "bundle",
        flavor: "Prod",  # Add the flavor explicitly
        build_type: "Release",
        project_dir: "./android",
        properties: {
          "target" => "lib/main_prod.dart",  # Passing the target as a Gradle property
          "versionCode" => ENV["BUILD_NUMBER"],  # Pass BUILD_NUMBER as versionCode
          "versionName" => ENV["VERSION_NAME"]  # Optional: pass versionName if needed
        }
      )  # <-- Closing the gradle block

      # Upload AAB to Google Play Store (Internal Testing Track) with release notes
      upload_to_play_store(
        track: "internal",
        aab: "./build/app/outputs/bundle/prodRelease/app-prod-release.aab",
        json_key: "./config/google_play_key.json",  # Use the path of the file created by GitHub Actions
        package_name: "com.makinglifeeasie.closetconscious",
        metadata_path: "./metadata/android",
        skip_upload_apk: true,  # This skips APK upload, so only AAB will be uploaded
        release_status: 'draft'
      )
    rescue => exception
      UI.error("Failed to deploy to internal track: #{exception.message}")
      raise exception
    ensure
      UI.message("Finished internal testing deployment.")
    end
  end
end

# iOS deployment lane (new)
platform :ios do
  desc "Deploy to TestFlight"
  lane :upload_to_testflight do
    begin
      # Make sure the API key path is set up by GitHub Actions
      api_key_path = ENV["APP_STORE_CONNECT_API_KEY_PATH"]

      # Set the version and build number from the environment
      build_number = ENV["BUILD_NUMBER"]
      version_name = ENV["VERSION_NAME"]

      # Update the version and build number in Info.plist if needed (optional)
      # Use this only if you're not using `pubspec.yaml` to manage them automatically
      # increment_build_number(build_number: build_number)
      # increment_version_number(version_number: version_name)

      # Build the app for release
      gym(
        workspace: "Runner.xcworkspace",
        scheme: "Runner",
        configuration: "Release",
        export_method: "app-store",  # Export method for TestFlight
        output_directory: "./build/ios",  # Output directory for the .ipa file
        output_name: "Runner.ipa",  # Name of the output .ipa file
        export_options: {
          provisioningProfiles: {
            "com.makinglifeeasie.closetconscious" => "AppStore"
          }
        },
        build_path: "./build/ios",
        silent: true,
        clean: true
      )

      # Upload to TestFlight
      upload_to_testflight(
        ipa: "./build/ios/Runner.ipa",
        api_key_path: api_key_path,
        skip_waiting_for_build_processing: false,  # Set to true if you want to skip waiting
        skip_submission: true,  # Set to false if you want to auto-submit for beta review
        distribute_external: false,  # Set to true if distributing to external testers
        release_notes: ENV["RELEASE_NOTES"]
      )
    rescue => exception
      UI.error("Failed to deploy to TestFlight: #{exception.message}")
      raise exception
    ensure
      UI.message("Finished TestFlight deployment.")
    end
  end
end
