platform :android do
  desc "Deploy to internal testing track"
  lane :deploy_internal do
    begin
      # Build AAB with the prod flavor
      gradle(
        task: "bundle",
        flavor: "Prod",  # Add the flavor explicitly
        build_type: "Release",
        project_dir: "./android",
        properties: {
          "target" => "lib/main_prod.dart",  # Passing the target as a Gradle property
          "versionCode" => ENV["BUILD_NUMBER"],  # Pass BUILD_NUMBER as versionCode
          "versionName" => ENV["VERSION_NAME"]  # Optional: pass versionName if needed
        }
      )  # <-- Closing the gradle block

      # Upload AAB to Google Play Store (Internal Testing Track) with release notes
      upload_to_play_store(
        track: "internal",
        aab: "./build/app/outputs/bundle/prodRelease/app-prod-release.aab",
        json_key: "./config/google_play_key.json",  # Use the path of the file created by GitHub Actions
        package_name: "com.makinglifeeasie.closetconscious",
        metadata_path: "./metadata/android",
        skip_upload_apk: true,  # This skips APK upload, so only AAB will be uploaded
        release_status: 'draft'
      )
    rescue => exception
      UI.error("Failed to deploy to internal track: #{exception.message}")
      raise exception
    ensure
      UI.message("Finished internal testing deployment.")
    end
  end
end

# iOS deployment lane (new)
platform :ios do
  desc "Deploy to TestFlight"
  lane :deploy_to_testflight do
        setup_ci
        UI.message("FLUTTER_ROOT in Fastlane is: #{ENV['FLUTTER_ROOT']}")
    begin
      # Set the environment variable to suppress Flutter analytics
      ENV["FLUTTER_SUPPRESS_ANALYTICS"] = "true"

      # Generate the API key hash
      api_key = app_store_connect_api_key(
        key_id: ENV["APP_STORE_CONNECT_API_KEY_ID"],
        issuer_id: ENV["APP_STORE_CONNECT_ISSUER_ID"],
        key_content: File.read(File.expand_path("AuthKey_SH96BHL99W.p8", __dir__)),
        in_house: false  # Set to true if using an Enterprise account
      )

      # Build the app for release
      gym(
        workspace: "ios/Runner.xcworkspace",  # Updated path
        scheme: "Runner-prod",
        configuration: "Release-Runner-prod",
        export_method: "app-store",
        output_directory: "./build/ios",
        output_name: "Runner.ipa",
        export_options: {
            provisioningProfiles: {
            "com.makinglifeeasie.closetconscious" => "8b673031-9521-4c9a-bfb4-13d0176c824b"  # Replace with your profile's exact name
            },
            signingStyle: "manual"  # Explicitly set manual signing
        },
        clean: true,
        buildlog_path: "./fastlane/logs",  # Saves the build log in the specified directory
        xcargs: "FLUTTER_SUPPRESS_ANALYTICS=1 FLUTTER_ROOT=#{ENV['FLUTTER_ROOT']} FLUTTER_TARGET=lib/main_prod.dart",
        verbose: true  # Enable verbose logging
      )

      # Upload to TestFlight
      upload_to_testflight(
        ipa: "./build/ios/Runner.ipa",
        api_key: api_key,
        skip_waiting_for_build_processing: false,
        skip_submission: true,
        distribute_external: false,
        release_notes: ENV["RELEASE_NOTES"]
      )

    rescue => exception
      UI.error("Failed to deploy to TestFlight: #{exception.message}")
      raise exception
    ensure
      UI.message("Finished TestFlight deployment.")
    end
  end
end
